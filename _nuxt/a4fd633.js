(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{452:function(e,t){const n={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"frontmatter-markdown"},[n("h4",{attrs:{id:"准备工作"}},[e._v("准备工作")]),e._v(" "),e._m(0),e._v(" "),n("h2",{attrs:{id:"fabric核心架构简介"}},[e._v("Fabric核心架构简介")]),e._v(" "),n("blockquote",[e._m(1),e._v(" "),n("ul",[n("li",[n("font",{attrs:{color:"red"}},[n("strong",[e._v("Identity - 身份管理")])])],1),e._v(" "),n("li",[n("font",{attrs:{color:"red"}},[n("strong",[e._v("Smart Contact - 智能合约")])])],1),e._v(" "),n("li",[n("font",{attrs:{color:"red"}},[n("strong",[e._v("Ledger及Transactions - 账本和交易")])])],1)])]),e._v(" "),n("h4",{attrs:{id:"1-identity"}},[e._v("1. Identity")]),e._v(" "),e._m(2),e._v(" "),n("h4",{attrs:{id:"2-smart-contract"}},[e._v("2. Smart Contract")]),e._v(" "),e._m(3),e._v(" "),n("h4",{attrs:{id:"3-ledger-transactions"}},[e._v("3. Ledger | Transactions")]),e._v(" "),e._m(4),e._v(" "),n("ul",[e._m(5),e._v(" "),n("li",[e._m(6),e._v(" "),n("blockquote",[n("p",[n("font",{attrs:{color:"red"}},[n("strong",[e._v("Fabric上的transction交易分两种，部署交易和调用交易。")])])],1),e._v(" "),n("ul",[n("li",[n("p",[n("font",{attrs:{color:"red"}},[n("strong",[e._v("部署交易")])])],1),e._v(" "),n("p",[e._v("把Chaincode部署到peer节点上并准备好被调用，当一个部署交易成功执行时，Chaincode就被部署到各个peer节点上。好比把一个web service或者EJB部署到应用服务器上的不同实例上。")])]),e._v(" "),n("li",[n("p",[n("font",{attrs:{color:"red"}},[n("strong",[e._v("调用交易")])])],1),e._v(" "),n("p",[e._v("客户端应用程序通过Fabric提供的API调用先前已部署好的某个chaincode的某个函数执行交易，并相应地读取和写入K-V数据库，返回是否成功或者失败。")])])])])])]),e._v(" "),n("h3",{attrs:{id:"fabric-网络"}},[e._v("Fabric 网络")]),e._v(" "),e._m(7),e._v(" "),e._m(8),e._v(" "),n("h2",{attrs:{id:"fabric核心模块"}},[e._v("Fabric核心模块")]),e._v(" "),n("p",[e._v("Fabric是一个由五个核心模块组成的程序组. 在fabric在成功编译完成之后, 一共会有五个核心模块, 如下:")]),e._v(" "),e._m(9),e._v(" "),e._m(10),e._v(" "),n("h4",{attrs:{id:"cryptogen-模块命令"}},[e._v("cryptogen 模块命令")]),e._v(" "),e._m(11),e._v(" "),e._m(12),e._v(" "),n("h5",{attrs:{id:"cryptogen-模块配置文件"}},[e._v("cryptogen 模块配置文件")]),e._v(" "),n("blockquote",[n("p",[e._v("cryptogen模块的配置文件用来描述需要生成的证书文件的特性，比如：有多少个组织有多少个节点，需要多少个账号等。这里我们通过一个cryptogen模块配置文件的具体例子来初步了解配置文件的结构，该例子是Fabric源代码中自带的示例 -  crypto-config.yaml:")]),e._v(" "),n("p",[n("font",{attrs:{color:"red"}},[e._v("这个配置文件的名字可以根据自己的意愿进行自定义, 即: xxx.yaml")])],1)]),e._v(" "),e._m(13),e._v(" "),n("h5",{attrs:{id:"生成证书文件"}},[e._v("生成证书文件")]),e._v(" "),e._m(14),e._v(" "),e._m(15),e._v(" "),n("h4",{attrs:{id:"configtxgen"}},[e._v("configtxgen")]),e._v(" "),e._m(16),e._v(" "),n("h5",{attrs:{id:"configtxgen-模块命令"}},[e._v("configtxgen 模块命令")]),e._v(" "),e._m(17),e._v(" "),e._m(18),e._v(" "),n("h5",{attrs:{id:"configtxgen模块配置文件"}},[e._v("configtxgen模块配置文件")]),e._v(" "),e._m(19),e._v(" "),e._m(20),e._v(" "),e._m(21),e._v(" "),n("h5",{attrs:{id:"configtxgen-的使用"}},[e._v("configtxgen 的使用")]),e._v(" "),n("blockquote",[n("p",[n("font",{attrs:{color:"red"}},[e._v("configtxgen  命令在执行的时候需要加载一个叫做configtx.yaml的配置文件, 如果没有指定默认重命令执行的当前目录查找，我们可以通过参数 "),n("code",{pre:!0},[e._v("-configPath")]),e._v("进行指定，也可以将这个目录设置到环境变量"),n("code",{pre:!0},[e._v("FABRIC_CFG_PATH")]),e._v("中。")])],1),e._v(" "),n("p",[e._v("export FABRIC_CFG_PATH=$(pwd)/networks/config/")])]),e._v(" "),e._m(22),e._v(" "),e._m(23),e._v(" "),n("h4",{attrs:{id:"orderer模块的配置信息"}},[e._v("orderer模块的配置信息")]),e._v(" "),e._m(24),e._v(" "),n("h4",{attrs:{id:"peer"}},[e._v("peer")]),e._v(" "),e._m(25),e._v(" "),n("h5",{attrs:{id:"命令行和常用参数"}},[e._v("命令行和常用参数")]),e._v(" "),e._m(26),e._v(" "),n("h5",{attrs:{id:"peer-channel子命令"}},[e._v("peer channel子命令")]),e._v(" "),n("blockquote",[e._m(27),e._v(" "),n("ul",[n("li",[n("p",[n("code",{pre:!0},[e._v("--cafile ")]),e._v(":  当前orderer节点pem格式的tls证书文件, "),n("font",{attrs:{color:"red"}},[e._v("要使用绝对路径")]),e._v(".")],1),e._v(" "),e._m(28)]),e._v(" "),e._m(29),e._v(" "),e._m(30)])]),e._v(" "),e._m(31),e._v(" "),e._m(32),e._v(" "),e._m(33),e._v(" "),n("blockquote",[n("p",[n("font",{attrs:{color:"red"}},[e._v("每个 org 会选举出一个 "),n("strong",[e._v("leader peer")]),e._v("（实际上可以存在多个），负责连接到 orderer。"),n("strong",[e._v("leader peer")]),e._v("从orderer 拿到新块的信息后分发给其他 peer。")])],1),e._v(" "),e._m(34)]),e._v(" "),e._m(35),e._v(" "),e._m(36),e._v(" "),n("h4",{attrs:{id:"启动docker-compose"}},[e._v("启动docker-compose")]),e._v(" "),n("h5",{attrs:{id:"编写配置文件"}},[e._v("编写配置文件")]),e._v(" "),e._m(37),e._v(" "),n("h5",{attrs:{id:"docker-compose-cliyaml"}},[e._v("docker-compose-cli.yaml")]),e._v(" "),e._m(38),e._v(" "),e._m(39),e._v(" "),e._m(40),e._v(" "),e._m(41),e._v(" "),e._m(42),e._v(" "),n("h4",{attrs:{id:"channel管理"}},[e._v("channel管理")])])},staticRenderFns:[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("blockquote",[n("ol",[n("li",[e._v("官方帮助文档：https://hyperledger-fabric.readthedocs.io/en/release-x.x/")]),e._v(" "),n("li",[e._v("安装 cURL(https://curl.haxx.se/download.html),"),n("code",{pre:!0},[e._v("curl --version")]),e._v(" 查询版本")]),e._v(" "),n("li",[e._v("安装docker，"),n("code",{pre:!0},[e._v("docker --version")]),e._v(" 查询版本")]),e._v(" "),n("li",[e._v("安装docker-compose,"),n("code",{pre:!0},[e._v("docker-compose --version")]),e._v(" 查询版本")]),e._v(" "),n("li",[e._v("安装 go 语言环境，"),n("code",{pre:!0},[e._v("go version")]),e._v(" 查询版本")]),e._v(" "),n("li",[e._v("安装node.js, "),n("code",{pre:!0},[e._v("node  -v")]),e._v(" 查询版本")]),e._v(" "),n("li",[e._v("Python 版本要求为 2.7，"),n("code",{pre:!0},[e._v("python --version")]),e._v(" 查询版本")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("strong",[e._v("Fabric架构的核心包括三部分：")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("blockquote",[n("p",[e._v("Identity，也就是身份管理，Fabric是目前为止在设计上最贴近联盟链思想的区块链。联盟链考虑到商业应用对安全、隐私、监管、审计、性能的需求，提高准入门槛，成员必须被许可才能加入网络。Fabric成员管理服务为整个区块链网络提供身份管理、隐私、保密和可审计的服务。成员管理服务通过公钥基础设施PKI和去中心化共识机制使得非许可的区块链变成许可制的区块链。")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("blockquote",[n("p",[e._v("Fabric的智能合约smart contract称为链码"),n("strong",[e._v("chaincode")]),e._v("，是一段代码，它处理网络成员所同意的业务逻辑。和以太坊相比，Fabric链码和底层账本是分开的，升级链码时并不需要迁移账本数据到新链码当中，真正实现了逻辑与数据的分离。")]),e._v(" "),n("p",[e._v("链码可采用"),n("code",{pre:!0},[e._v("Go、Java、Node.js")]),e._v("语言编写。链码被编译成一个独立的应用程序，fabric用Docker容器来运行chaincode，里面的base镜像都是经过签名验证的安全镜像，包括OS层和开发chaincode的语言、runtime和SDK层。一旦chaincode容器被启动，它就会通过gRPC与启动这个chaincode的Peer节点连接。")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("blockquote",[n("p",[e._v("Fabric使用建立在HTTP/2上的P2P协议来管理分布式账本。采取可插拔的方式来根据具体需求来设置共识协议，比如PBFT，Raft，PoW和PoS等。")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("li",[n("p",[n("strong",[e._v("Ledger")])]),e._v(" "),n("blockquote",[n("p",[e._v("账本Ledger主要包含两块：blockchain和state。blockchain就是一系列连在一起的block，用来记录历史交易。state对应账本的当前最新状态，它是一个key-value数据库，Fabric默认采用"),n("code",{pre:!0},[e._v("Level DB")]),e._v(", 可以替换成其他的Key-value数据库，如"),n("code",{pre:!0},[e._v("Couch DB")]),e._v("。举个例子。我们采用区块链实现一个弹珠交易的系统。我们开发了一个Chaincode, 每个弹珠有以下几个属性：Name, owner, color, size.  可以定义一个JSON对象，用name做KEY, JSON对象做Value，存储在Level DB或者CouchDB中。")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("strong",[e._v("Transactions")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("blockquote",[n("p",[e._v("业务网络，也叫共识网络或区块链网络，由不同的节点构成。节点是区块链的通信实体，节点是一个逻辑概念，不同类型的节点可以运行在同一台物理服务器上。这些节点可能部署在云上面或者本地。可能来自不同的公司或者组织。在区块链网络中有两种类型的节点：Peer节点和Orderer节点")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[n("p",[n("strong",[e._v("Peer节点：")])]),e._v(" "),n("blockquote",[n("p",[e._v("chaincode部署在Peer节点上，它对账本进行读写操作。一个Peer节点可以充当多种角色，如背书者endorser, 提交者committer。一个区块链网络中会有多个Peer节点。")])])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("Orderer节点：")])]),e._v(" "),n("blockquote",[n("p",[e._v("对交易进行排序，批量打包，生成区块，发给Peer节点。一个区块链网络中会有多个Orderer节点，它们共同提供排序服务。排序服务可以别实现为多种不同的方式，从一个中心化的服务（被用于开发和测试，如Solo）,到分布式协议（如Kafka）。")]),e._v(" "),n("p",[e._v("排序服务提供了通向客户端和Peer节点的共享通信通道。提供了包含交易的消息广播服务（broadcast和deliver）。客户端可以通过这个通道向所有的节点广播（broadcast）消息。通道可以向连接到该通道的节点投递(deliver)消息。")]),e._v(" "),n("p",[e._v("排序服务支持多通道，类似于发布/订阅消息系统中的主题topic。客户端和Peer节点可以连接到一个给点的通道，并通过给定的通道发送和接收消息。多通道使得Peer节点可以基于应用访问控制策略来订阅任意数量的通道; 也就是说，应用程序在指定Peer节点的子集中架设通道。这些peer组成提交到该通道交易的相关者集合，而且只有这些peer可以接收包含相关交易的区块，与其他交易完全隔离，实现数据隔离和保密。")]),e._v(" "),n("p",[e._v("此外，peers的子集将这些私有块提交到不同的账本上，允许它们保护这些私有交易，与其他peers子集的账本隔离开来。应用程序根据业务逻辑决定将交易发送到1个或多个通道。")])])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("Channel")])]),e._v(" "),n("blockquote",[n("p",[e._v("Channel在fabric中是一个相当重要的概念，可译作通道或频道。对于channel的理解，不妨想象一下电视节目的频道和“我和你不在一个频道”这句话。Channel本身存在于orderer结点内部，但需要通过peer结点使用"),n("code",{pre:!0},[e._v("peer channel ...")]),e._v("命令进行维护。一个peer结点要想与另一个peer结点发生交易，最基本的前提就是两个结点必须同时处在同一个Channel中，block账本与channel也是一对一的关系，即一个channel一个账本。")])])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"center"}},[e._v("模块名称")]),e._v(" "),n("th",{staticStyle:{"text-align":"center"}},[e._v("功能")])])]),e._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"center"}},[n("code",{pre:!0},[e._v("peer")])]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}},[e._v("主节点模块, 负责存储区块链数据, 运行维护链码")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[n("code",{pre:!0},[e._v("orderer")])]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}},[e._v("交易打包, 排序模块")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[n("code",{pre:!0},[e._v("cryptogen")])]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}},[e._v("组织和证书生成模块")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[n("code",{pre:!0},[e._v("configtxgen")])]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}},[e._v("区块和交易生成模块")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[n("code",{pre:!0},[e._v("configtxlator")])]),e._v(" "),n("td",{staticStyle:{"text-align":"center"}},[e._v("区块和交易解析模块")])])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("blockquote",[n("p",[e._v("五个模块中"),n("code",{pre:!0},[e._v("peer")]),e._v("和"),n("code",{pre:!0},[e._v("orderer")]),e._v("属于系统模块, "),n("code",{pre:!0},[e._v("cryptogen")]),e._v(", "),n("code",{pre:!0},[e._v("configtxgen")]),e._v(", "),n("code",{pre:!0},[e._v("configtxlator")]),e._v("属于工具模块。工具模块负责证书文件、区块链创始块、通道创始块等相关文件和证书的生成工作，但是工具模块不参与系统的运行。peer模块和 orderer 模块作为系统模块是Fabric的核心模块，启动之后会以守护进程的方式在系统后台长期运行。")]),e._v(" "),n("p",[e._v("Fabric的5个核心模块都是基于命令行的方式运行的，目前Fabric没有为这些模块提供相关的图形界面，因此想要熟练使用Fabric的这些核心模块，必须熟悉这些模块的命令选项。")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("blockquote",[n("p",[e._v("cryptogen模块是通过命令行的方式运行的，一个cryptogen命令由命令行参数和配置文件两部分组成，通过执行命令"),n("code",{pre:!0},[e._v("cryptogen --help")]),e._v("可以显示cryptogen模块的命令行选项，执行结果如下所示：")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("pre",{staticClass:"language-shell"},[n("code",{pre:!0,attrs:{class:"language-shell"}},[e._v("$ cryptogen --help\nusage: cryptogen "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("flags"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("command"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("args"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\nUtility "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" generating Hyperledger Fabric key material\nFlags:\n  --help  Show context-sensitive "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("help")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("also try --help-long and --help-man"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(".\nCommands:\n   "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 显示帮助信息")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("help")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("command"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n   "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 根据配置文件生成证书信息。")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v("generate "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("flags"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\t\n   "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 显示系统默认的cryptogen模块配置文件信息")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),e._v("showtemplate\n   "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 显示当前模块版本号")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v("version"),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),e._v("\n   "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 扩展现有网络")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v("extend "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("flags"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("pre",{staticClass:"language-bash"},[n("code",{pre:!0,attrs:{class:"language-bash"}},[e._v("OrdererOrgs:\t\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 排序节点的组织定义")]),e._v("\n  - Name: Orderer\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# orderer节点的名称")]),e._v("\n \tDomain: example.com\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# orderer节点的根域名 ")]),e._v("\n \tSpecs:\n\t    - Hostname: orderer\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# orderer节点的主机名")]),e._v("\nPeerOrgs:\t\t\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# peer节点的组织定义")]),e._v("\n  - Name: Org1\t\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 组织1的名称\t1\t1")]),e._v("\n\tDomain: org1.example.com\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 组织1的根域名")]),e._v("\n \tEnableNodeOUs: "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 是否支持node.js")]),e._v("\n \tTemplate:\t\t\t\t\t\n\t    Count: "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v("\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 组织1中的节点(peer)数目")]),e._v("\n\tUsers:\n \t    Count: "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 组织1中的用户数目")]),e._v("\n  - Name: Org2\n    Domain: org2.example.com\n    EnableNodeOUs: "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\n    Template:\n        Count: "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v("\n    Users:\n        Count: "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ---------------------------------------------------------------------------")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# "OrdererOrgs" - Definition of organizations managing orderer nodes')]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ---------------------------------------------------------------------------")]),e._v("\nOrdererOrgs:\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ---------------------------------------------------------------------------")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Orderer")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ---------------------------------------------------------------------------")]),e._v("\n  - Name: Orderer\n    Domain: example.com\n    EnableNodeOUs: "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ---------------------------------------------------------------------------")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# "Specs" - See PeerOrgs below for complete description')]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ---------------------------------------------------------------------------")]),e._v("\n    Specs:\n      - Hostname: orderer\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ---------------------------------------------------------------------------")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# "PeerOrgs" - Definition of organizations managing peer nodes')]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ---------------------------------------------------------------------------")]),e._v("\nPeerOrgs:\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ---------------------------------------------------------------------------")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Org1")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ---------------------------------------------------------------------------")]),e._v("\n  - Name: Org1\n    Domain: org1.example.com\n    EnableNodeOUs: "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ---------------------------------------------------------------------------")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# "CA"')]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ---------------------------------------------------------------------------")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Uncomment this section to enable the explicit definition of the CA for this")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# organization.  This entry is a Spec.  See "Specs" section below for details.')]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ---------------------------------------------------------------------------")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# CA:")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    Hostname: ca # implicitly ca.org1.example.com")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    Country: US")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    Province: California")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    Locality: San Francisco")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    OrganizationalUnit: Hyperledger Fabric")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    StreetAddress: address for org # default nil")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    PostalCode: postalCode for org # default nil")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ---------------------------------------------------------------------------")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# "Specs"')]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ---------------------------------------------------------------------------")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Uncomment this section to enable the explicit definition of hosts in your")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# configuration.  Most users will want to use Template, below")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Specs is an array of Spec entries.  Each Spec entry consists of two fields:")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   - Hostname:   (Required) The desired hostname, sans the domain.")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   - CommonName: (Optional) Specifies the template or explicit override for")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#                 the CN.  By default, this is the template:")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#                              "{{.Hostname}}.{{.Domain}}"')]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#                 which obtains its values from the Spec.Hostname and")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#                 Org.Domain, respectively.")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   - SANS:       (Optional) Specifies one or more Subject Alternative Names")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#                 to be set in the resulting x509. Accepts template")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#                 variables {{.Hostname}}, {{.Domain}}, {{.CommonName}}. IP")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#                 addresses provided here will be properly recognized. Other")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#                 values will be taken as DNS names.")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#                 NOTE: Two implicit entries are created for you:")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#                     - {{ .CommonName }}")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#                     - {{ .Hostname }}")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ---------------------------------------------------------------------------")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Specs:")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#   - Hostname: foo # implicitly "foo.org1.example.com"')]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#     CommonName: foo27.org5.example.com # overrides Hostname-based FQDN set above")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#     SANS:")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#       - "bar.{{.Domain}}"')]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#       - "altfoo.{{.Domain}}"')]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#       - "{{.Hostname}}.org6.net"')]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#       - 172.16.10.31")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   - Hostname: bar")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   - Hostname: baz")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ---------------------------------------------------------------------------")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# "Template"')]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ---------------------------------------------------------------------------")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Allows for the definition of 1 or more hosts that are created sequentially")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# from a template. By default, this looks like "peer%d" from 0 to Count-1.')]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# You may override the number of nodes (Count), the starting index (Start)")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# or the template used to construct the name (Hostname).")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Note: Template and Specs are not mutually exclusive.  You may define both")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# sections and the aggregate nodes will be created for you.  Take care with")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# name collisions")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ---------------------------------------------------------------------------")]),e._v("\n    Template:\n      Count: "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Start: 5")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Hostname: {{.Prefix}}{{.Index}} # default")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# SANS:")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#   - "{{.Hostname}}.alt.{{.Domain}}"')]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ---------------------------------------------------------------------------")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# "Users"')]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ---------------------------------------------------------------------------")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Count: The number of user accounts _in addition_ to Admin")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ---------------------------------------------------------------------------")]),e._v("\n    Users:\n      Count: "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ---------------------------------------------------------------------------")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Org2: See "Org1" for full specification')]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ---------------------------------------------------------------------------")]),e._v("\n  - Name: Org2\n    Domain: org2.example.com\n    EnableNodeOUs: "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v("\n    Template:\n      Count: "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\n    Users:\n      Count: "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\n")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("pre",{staticClass:"language-shell"},[n("code",{pre:!0,attrs:{class:"language-shell"}},[e._v("``"),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),e._v("shell\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 根据默认模板在对应目录下生成证书")]),e._v("\n$ cryptogen generate\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 根据指定的模板在指定目录下生成证书")]),e._v("\n$ cryptogen generate --config"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("./crycrypto-config.yaml --output ./crypto-config\n\t--config: 指定配置文件\n\t--output: 指定证书文件的存储位置, 可以不指定。会在对应路径生成目录，默认名字为：crypto-config\n"),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v("``\n")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("pre",{staticClass:"language-shell"},[n("code",{pre:!0,attrs:{class:"language-shell"}},[e._v(" tree \n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v("\n├── ordererOrganizations "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# orderer节点相关的证书文件")]),e._v("\n│   └── example.com   "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 根域名为example.com的orderer节点的相关证书文件")]),e._v("\n│       ├── ca "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# CA服务器的签名文件")]),e._v("\n│       │   ├── ca.example.com-cert.pem\n│       │   └── priv_sk\n│       ├── msp\n│       │   ├── admincerts "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# orderer管理员的证书")]),e._v("\n│       │   │   └── Admin@example.com-cert.pem\n│       │   ├── cacerts "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# orderer根域名服务器的签名证书")]),e._v("\n│       │   │   └── ca.example.com-cert.pem\n│       │   └── tlscacerts "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# tls连接用的身份证书")]),e._v("\n│       │       └── tlsca.example.com-cert.pem\n│       ├── orderers "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# orderer节点需要的相关的证书文件")]),e._v("\n│       │   └── orderer.example.com\n│       │       ├── msp "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# orderer节点相关证书")]),e._v("\n│       │       │   ├── admincerts\n│       │       │   │   └── Admin@example.com-cert.pem\n│       │       │   ├── cacerts\n│       │       │   │   └── ca.example.com-cert.pem\n│       │       │   ├── keystore\n│       │       │   │   └── priv_sk\n│       │       │   ├── signcerts\n│       │       │   │   └── orderer.example.com-cert.pem\n│       │       │   └── tlscacerts\n│       │       │       └── tlsca.example.com-cert.pem\n│       │       └── tls "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# orderer节点和其他节点连接用的身份证书")]),e._v("\n│       │           ├── ca.crt\n│       │           ├── server.crt\n│       │           └── server.key\n│       ├── tlsca\n│       │   ├── priv_sk\n│       │   └── tlsca.example.com-cert.pem\n│       └── "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("users")]),e._v("\n│           └── Admin@example.com\n│               ├── msp\n│               │   ├── admincerts\n│               │   │   └── Admin@example.com-cert.pem\n│               │   ├── cacerts\n│               │   │   └── ca.example.com-cert.pem\n│               │   ├── keystore\n│               │   │   └── priv_sk\n│               │   ├── signcerts\n│               │   │   └── Admin@example.com-cert.pem\n│               │   └── tlscacerts\n│               │       └── tlsca.example.com-cert.pem\n│               └── tls\n│                   ├── ca.crt\n│                   ├── client.crt\n│                   └── client.key\n└── peerOrganizations  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#组织相关的证书文件(组织的节点数, 用户数等证书文件)")]),e._v("\n    ├── org1.example.com\n    │   ├── ca "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 根节点签名证书")]),e._v("\n    │   │   ├── ca.org1.example.com-cert.pem\n    │   │   └── priv_sk\n    │   ├── msp "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 组织管理员的证书")]),e._v("\n    │   │   ├── admincerts\n    │   │   │   └── Admin@org1.example.com-cert.pem\n    │   │   ├── cacerts "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 组织的根证书")]),e._v("\n    │   │   │   └── ca.org1.example.com-cert.pem\n    │   │   └── tlscacerts "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# TLS连接身份证书")]),e._v("\n    │   │       └── tlsca.org1.example.com-cert.pem\n    │   ├── peers\n    │   │   └── peer0.org1.example.com\n    │   │       ├── msp\n    │   │       │   ├── admincerts "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 组织的管理证书, 创建通道必须要有该证书")]),e._v("\n    │   │       │   │   └── Admin@org1.example.com-cert.pem\n    │   │       │   ├── cacerts "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 组织根证书")]),e._v("\n    │   │       │   │   └── ca.org1.example.com-cert.pem\n    │   │       │   ├── keystore "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 当前节点的私钥")]),e._v("\n    │   │       │   │   └── priv_sk\n    │   │       │   ├── signcerts "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 当前节点签名的数字证书")]),e._v("\n    │   │       │   │   └── peer0.org1.example.com-cert.pem\n    │   │       │   └── tlscacerts "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# tls连接的身份证书")]),e._v("\n    │   │       │       └── tlsca.org1.example.com-cert.pem\n    │   │       └── tls \n    │   │           ├── ca.crt "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 组织的根证书")]),e._v("\n    │   │           ├── server.crt "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 验证本节点签名的证书")]),e._v("\n    │   │           └── server.key "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 当前节点的私钥")]),e._v("\n    │   ├── tlsca\n    │   │   ├── priv_sk\n    │   │   └── tlsca.org1.example.com-cert.pem\n    │   └── "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("users")]),e._v("\n    │       ├── Admin@org1.example.com\n    │       │   ├── msp\n    │       │   │   ├── admincerts\n    │       │   │   │   └── Admin@org1.example.com-cert.pem\n    │       │   │   ├── cacerts\n    │       │   │   │   └── ca.org1.example.com-cert.pem\n    │       │   │   ├── keystore\n    │       │   │   │   └── priv_sk\n    │       │   │   ├── signcerts\n    │       │   │   │   └── Admin@org1.example.com-cert.pem\n    │       │   │   └── tlscacerts\n    │       │   │       └── tlsca.org1.example.com-cert.pem\n    │       │   └── tls\n    │       │       ├── ca.crt\n    │       │       ├── client.crt\n    │       │       └── client.key\n    │       └── User1@org1.example.com\n    │           ├── msp\n    │           │   ├── admincerts "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 组织的根证书, 作为管理身份的验证")]),e._v("\n    │           │   │   └── User1@org1.example.com-cert.pem\n    │           │   ├── cacerts "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 用户所属组织的根证书")]),e._v("\n    │           │   │   └── ca.org1.example.com-cert.pem\n    │           │   ├── keystore "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 用户私钥")]),e._v("\n    │           │   │   └── priv_sk\n    │           │   ├── signcerts "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 用户的签名证书")]),e._v("\n    │           │   │   └── User1@org1.example.com-cert.pem\n    │           │   └── tlscacerts "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# tls连接通信证书, sdk客户端使用")]),e._v("\n    │           │       └── tlsca.org1.example.com-cert.pem\n    │           └── tls\n    │               ├── ca.crt "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 组织的根证书")]),e._v("\n    │               ├── client.crt "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 客户端身份的证书")]),e._v("\n    │               └── client.key "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 客户端的私钥")]),e._v("\n    └── org2.example.com\n        ├── ca\n        │   ├── ca.org2.example.com-cert.pem\n        │   └── priv_sk\n        ├── msp\n        │   ├── admincerts\n        │   │   └── Admin@org2.example.com-cert.pem\n        │   ├── cacerts\n        │   │   └── ca.org2.example.com-cert.pem\n        │   └── tlscacerts\n        │       └── tlsca.org2.example.com-cert.pem\n        ├── peers\n        │   └── peer0.org2.example.com\n        │       ├── msp\n        │       │   ├── admincerts\n        │       │   │   └── Admin@org2.example.com-cert.pem\n        │       │   ├── cacerts\n        │       │   │   └── ca.org2.example.com-cert.pem\n        │       │   ├── keystore\n        │       │   │   └── priv_sk\n        │       │   ├── signcerts\n        │       │   │   └── peer0.org2.example.com-cert.pem\n        │       │   └── tlscacerts\n        │       │       └── tlsca.org2.example.com-cert.pem\n        │       └── tls\n        │           ├── ca.crt\n        │           ├── server.crt\n        │           └── server.key\n        ├── tlsca\n        │   ├── priv_sk\n        │   └── tlsca.org2.example.com-cert.pem\n        └── "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("users")]),e._v("\n            ├── Admin@org2.example.com\n            │   ├── msp\n            │   │   ├── admincerts\n            │   │   │   └── Admin@org2.example.com-cert.pem\n            │   │   ├── cacerts\n            │   │   │   └── ca.org2.example.com-cert.pem\n            │   │   ├── keystore\n            │   │   │   └── priv_sk\n            │   │   ├── signcerts\n            │   │   │   └── Admin@org2.example.com-cert.pem\n            │   │   └── tlscacerts\n            │   │       └── tlsca.org2.example.com-cert.pem\n            │   └── tls\n            │       ├── ca.crt\n            │       ├── client.crt\n            │       └── client.key\n            └── User1@org2.example.com\n                ├── msp\n                │   ├── admincerts\n                │   │   └── User1@org2.example.com-cert.pem\n                │   ├── cacerts\n                │   │   └── ca.org2.example.com-cert.pem\n                │   ├── keystore\n                │   │   └── priv_sk\n                │   ├── signcerts\n                │   │   └── User1@org2.example.com-cert.pem\n                │   └── tlscacerts\n                │       └── tlsca.org2.example.com-cert.pem\n                └── tls\n                    ├── ca.crt\n                    ├── client.crt\n                    └── client.key\n\n\n")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("blockquote",[n("p",[e._v("configtxgen 模块的功能一共有两个:")]),e._v(" "),n("ul",[n("li",[e._v("生成 orderer 节点的初始化文件")]),e._v(" "),n("li",[e._v("生成 channel 的初始化文件")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("blockquote",[n("p",[e._v("configtxgen 模块是通过命令行的方式运行的，通过执行命令"),n("code",{pre:!0},[e._v("configtxgen --help")]),e._v("可以显示 configtxgen 模块的命令行选项，执行结果如下所示：")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("pre",{staticClass:"language-shell"},[n("code",{pre:!0,attrs:{class:"language-shell"}},[e._v("$ configtxgen --help\nUsage of ./configtxgen:\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 指定所属的组织")]),e._v("\n  -asOrg string\n        Performs the config generation as a particular organization "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("by name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(", only \n        including values "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" the "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("write")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" that org "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("likely"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" has privilege to "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 指定创建的channel的名字, 如果没指定系统会提供一个默认的名字.")]),e._v("\n  -channelID string\n        The channel ID to use "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" the configtx\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 执行命令要加载的配置文件的路径, 不指定会在当前目录下查找")]),e._v("\n  -configPath string\n        The path containing the configuration to use "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("if "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 打印指定区块文件中的配置内容，string：查看的区块文件的名字")]),e._v("\n  -inspectBlock string\n        Prints the configuration contained "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" the block at the specified path\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 打印创建通道的交易的配置文件")]),e._v("\n  -inspectChannelCreateTx string\n        Prints the configuration contained "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" the transaction at the specified path\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 更新channel的配置信息")]),e._v("\n  -outputAnchorPeersUpdate string\n        Creates an config update to update an anchor peer "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("works only with the default \n        channel creation, and only "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" the first update"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 输出区块文件的路径")]),e._v("\n  -outputBlock string\n        The path to "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("write")]),e._v(" the genesis block to "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("if "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 标示输出创始区块文件")]),e._v("\n  -outputCreateChannelTx string\n        The path to "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("write")]),e._v(" a channel creation configtx to "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("if "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  将组织的定义打印为JSON(这对在组织中手动添加一个通道很有用)。")]),e._v("\n  -printOrg string\n        Prints the definition of an organization as JSON. "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("useful "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" adding an org to\n        a channel manually"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 指定配置文件中的节点")]),e._v("\n  -profile string\n        The profile from configtx.yaml to use "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" generation. "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("default\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"SampleInsecureSolo"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 显示版本信息")]),e._v("\n  -version\n        Show version information\n")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("blockquote",[n("p",[e._v("configtxgen 模块的配置文件包含Fabric系统初始块、Channel初始块文件等信息。configtxgen 模块的配置文件样例如下所示，以下部分定义了整个系统的配置信息：")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("pre",{staticClass:"language-shell"},[n("code",{pre:!0,attrs:{class:"language-shell"}},[n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Copyright IBM Corp. All Rights Reserved.")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# SPDX-License-Identifier: Apache-2.0")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n\n---\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("################################################################################")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   Section: Organizations")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   - This section defines the different organizational identities which will")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   be referenced later in the configuration.")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("################################################################################")]),e._v("\nOrganizations:\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# SampleOrg defines an MSP using the sampleconfig.  It should never be used")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# in production but may be used as a template for other definitions")]),e._v("\n    - "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&")]),e._v("OrdererOrg\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# DefaultOrg defines the organization which is used in the sampleconfig")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# of the fabric.git development environment")]),e._v("\n        Name: OrdererOrg\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ID to load the MSP definition as")]),e._v("\n        ID: OrdererMSP\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# MSPDir is the filesystem path which contains the MSP configuration")]),e._v("\n        MSPDir: crypto-config/ordererOrganizations/example.com/msp\n\n    - "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&")]),e._v("Org1\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# DefaultOrg defines the organization which is used in the sampleconfig")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# of the fabric.git development environment")]),e._v("\n        Name: Org1MSP\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ID to load the MSP definition as")]),e._v("\n        ID: Org1MSP\n\n        MSPDir: crypto-config/peerOrganizations/org1.example.com/msp\n\n        AnchorPeers:\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# AnchorPeers defines the location of peers which can be used")]),e._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# for cross org gossip communication.  Note, this value is only")]),e._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# encoded in the genesis block in the Application section context")]),e._v("\n            - Host: peer0.org1.example.com\n              Port: "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("7051")]),e._v("\n\n    - "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&")]),e._v("Org2\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# DefaultOrg defines the organization which is used in the sampleconfig")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# of the fabric.git development environment")]),e._v("\n        Name: Org2MSP\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ID to load the MSP definition as")]),e._v("\n        ID: Org2MSP\n\n        MSPDir: crypto-config/peerOrganizations/org2.example.com/msp\n\n        AnchorPeers:\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# AnchorPeers defines the location of peers which can be used")]),e._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# for cross org gossip communication.  Note, this value is only")]),e._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# encoded in the genesis block in the Application section context")]),e._v("\n            - Host: peer0.org2.example.com\n              Port: "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("7051")]),e._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("################################################################################")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   SECTION: Capabilities")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   - This section defines the capabilities of fabric network. This is a new")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   concept as of v1.1.0 and should not be utilized in mixed networks with")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   v1.0.x peers and orderers.  Capabilities define features which must be")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   present in a fabric binary for that binary to safely participate in the")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   fabric network.  For instance, if a new MSP type is added, newer binaries")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   might recognize and validate the signatures from this type, while older")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   binaries without this support would be unable to validate those")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   transactions.  This could lead to different versions of the fabric binaries")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   having different world states.  Instead, defining a capability for a channel")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   informs those binaries without this capability that they must cease")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   processing transactions until they have been upgraded.  For v1.0.x if any")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   capabilities are defined (including a map with all capabilities turned off)")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   then the v1.0.x peer will deliberately crash.")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("################################################################################")]),e._v("\nCapabilities:\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Channel capabilities apply to both the orderers and the peers and must be")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# supported by both.  Set the value of the capability to true to require it.")]),e._v("\n    Global: "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&")]),e._v("ChannelCapabilities\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# V1.1 for Global is a catchall flag for behavior which has been")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# determined to be desired for all orderers and peers running v1.0.x,")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# but the modification of which would cause incompatibilities.  Users")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# should leave this flag set to true.")]),e._v("\n        V1_1: "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Orderer capabilities apply only to the orderers, and may be safely")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# manipulated without concern for upgrading peers.  Set the value of the")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# capability to true to require it.")]),e._v("\n    Orderer: "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&")]),e._v("OrdererCapabilities\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# V1.1 for Order is a catchall flag for behavior which has been")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# determined to be desired for all orderers running v1.0.x, but the")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# modification of which  would cause incompatibilities.  Users should")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# leave this flag set to true.")]),e._v("\n        V1_1: "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Application capabilities apply only to the peer network, and may be safely")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# manipulated without concern for upgrading orderers.  Set the value of the")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# capability to true to require it.")]),e._v("\n    Application: "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&")]),e._v("ApplicationCapabilities\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# V1.2 for Application is a catchall flag for behavior which has been")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# determined to be desired for all peers running v1.0.x, but the")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# modification of which would cause incompatibilities.  Users should")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# leave this flag set to true.")]),e._v("\n        V1_2: "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("################################################################################")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   SECTION: Application")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   - This section defines the values to encode into a config transaction or")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   genesis block for application related parameters")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("################################################################################")]),e._v("\nApplication: "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&")]),e._v("ApplicationDefaults\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Organizations is the list of orgs which are defined as participants on")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the application side of the network")]),e._v("\n    Organizations:\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("################################################################################")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   SECTION: Orderer")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   - This section defines the values to encode into a config transaction or")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   genesis block for orderer related parameters")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("################################################################################")]),e._v("\nOrderer: "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&")]),e._v("OrdererDefaults\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Orderer Type: The orderer implementation to start")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Available types are "solo" and "kafka"')]),e._v("\n    OrdererType: solo\n\n    Addresses:\n        - orderer.example.com:7050\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Batch Timeout: The amount of time to wait before creating a batch")]),e._v("\n    BatchTimeout: 2s\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Batch Size: Controls the number of messages batched into a block")]),e._v("\n    BatchSize:\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Max Message Count: The maximum number of messages to permit in a batch")]),e._v("\n        MaxMessageCount: "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),e._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Absolute Max Bytes: The absolute maximum number of bytes allowed for")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the serialized messages in a batch.")]),e._v("\n        AbsoluteMaxBytes: "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("99")]),e._v(" MB\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Preferred Max Bytes: The preferred maximum number of bytes allowed for")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the serialized messages in a batch. A message larger than the preferred")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# max bytes will result in a batch larger than preferred max bytes.")]),e._v("\n        PreferredMaxBytes: "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("512")]),e._v(" KB\n\n    Kafka:\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Brokers: A list of Kafka brokers to which the orderer connects")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# NOTE: Use IP:port notation")]),e._v("\n        Brokers:\n            - "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:9092\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Organizations is the list of orgs which are defined as participants on")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the orderer side of the network")]),e._v("\n    Organizations:\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("################################################################################")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   Profile")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   - Different configuration profiles may be encoded here to be specified")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   as parameters to the configtxgen tool")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("################################################################################")]),e._v("\nProfiles:\n\n    TwoOrgsOrdererGenesis:\n        Capabilities:\n            "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),e._v(": *ChannelCapabilities\n        Orderer:\n            "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),e._v(": *OrdererDefaults\n            Organizations:\n                - *OrdererOrg\n            Capabilities:\n                "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),e._v(": *OrdererCapabilities\n        Consortiums:\n            SampleConsortium:\n                Organizations:\n                    - *Org1\n                    - *Org2\n    TwoOrgsChannel:\n        Consortium: SampleConsortium\n        Application:\n            "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),e._v(": *ApplicationDefaults\n            Organizations:\n                - *Org1\n                - *Org2\n            Capabilities:\n                "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),e._v(": *ApplicationCapabilities\n\n\n")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("blockquote",[n("p",[e._v("上述配置文件中的 Profiles节点定义了整个系统的结构和channel的结构, 配置文件中的"),n("code",{pre:!0},[e._v("Profiles")]),e._v("关键字不允许修改，否则配置无效。系统配置信息中设置了系统中orderer节点的信息以及系统中包含的组织数。")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[n("p",[e._v("创建 "),n("code",{pre:!0},[e._v("orderer")]),e._v(" 的初始块")]),e._v(" "),n("pre",{staticClass:"language-shell"},[n("code",{pre:!0,attrs:{class:"language-shell"}},[e._v("$ configtxgen -profile xxxOrgOrdererGenesis -outputBlock ./channel-artifacts/genesis.block\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# xxxtOrgOrdererGenesis: 要和配置文件中的配置项对应, 可以由数字和字母构成.")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# orderer初始块文件为genesis.block，生成在channel-artifacts目录中")]),e._v("\n")])])]),e._v(" "),n("li",[n("p",[e._v("创建 "),n("code",{pre:!0},[e._v("channel")]),e._v(" 的初始块")]),e._v(" "),n("pre",{staticClass:"language-shell"},[n("code",{pre:!0,attrs:{class:"language-shell"}},[e._v("$ configtxgen -profile xxxOrgsChannel -outputCreateChannelTx ./channel-artifacts/channel.tx -channelID mychannel\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# OrgsChannel: 要和配置文件中的配置项对应")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# channel.tx 为生成的频道文件, 在channel-artifacts目录中")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 创建的频道名称为: mychannel")]),e._v("\n")])])]),e._v(" "),n("li",[n("p",[e._v("创建锚点更新文件 - 每个组织分别进行更新")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("pre",{staticClass:"language-shell"},[n("code",{pre:!0,attrs:{class:"language-shell"}},[n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 更新第一个组织 OrgGoMSP 的peer节点")]),e._v("\n$ configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/GoMSPanchors.tx -channelID mychannel -asOrg OrgGoMSP\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# TwoOrgsChannel: 要和配置文件中的配置项对应")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# OrgGoMSP组织使用的频道为 mychannel 生成的配置信息文件名为 GoMSPanchors.tx")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#==============================================================================")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 更新第2个组织 OrgJavaMSP 的peer节点")]),e._v("\n$ configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/JavaMSPanchors.tx -channelID mychannel -asOrg OrgJavaMSP\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# TwoOrgsChannel: 要和配置文件中的配置项对应")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# OrgJavaMSP组织使用的频道为 mychannel 生成的配置信息文件名为 JavaMSPanchors.tx")]),e._v("\n")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("pre",{staticClass:"language-shell"},[n("code",{pre:!0,attrs:{class:"language-shell"}},[n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# orderer节点运行需要配置一些环境变量")]),e._v("\nORDERER_GENERAL_LOGLEVEL\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 日志级别")]),e._v("\n\t- "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),e._v("critical "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" error "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" warning "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" notice "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" info "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" debug\nORDERER_GENERAL_LISTENADDRESS\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# orderer服务器监听的地址")]),e._v("\nORDERER_GENERAL_LISTENPORT\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# orderer服务器监听的端口")]),e._v("\nORDERER_GENERAL_GENESTSMETHOD\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 初始化块(Genesis)的来源方式, 一般赋值为 file 即可")]),e._v("\nORDERER_GENERAL_GENESISFILE\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 存储初始块文件的路径")]),e._v("\nORDERER_GENERAL_LOCALMSPID\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# orderer节点的编号,在configtxgen模块配置文件中指定的")]),e._v("\n\t- "),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v("configtx.yaml配置文件中排序节点的组织的ID\nORDERER_GENERAL_LOCALMSPDIR\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# orderer节点msp文件路径")]),e._v("\nORDERER_GENERAL_LEDGERTYPE\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 账本类型, ram, json, file")]),e._v("\n\t- "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),e._v("ram: 账本数据存储在内存, 一般用于测试环境\n\t- "),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v("json/file: 账本数据保存在文件中, 生成环境中推荐使用file \nORDERER_GENERAL_BATCHTIMEOUT\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 批处理超时, 创建批处理之前的等待时间")]),e._v("\n\t- "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),e._v("每隔一个BATCHTIMEOUT时长, 就会生成一个新的区块\nORDERER_GENERAL_MAXMESSAGECOUNT\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 最大消息计数, 批处理的最大消息数量")]),e._v("\n\t- "),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v("只要一个区块的消息达到MAXMESSAGECOUNT指定的数量, 就会生成一个新的区块\nORDERER_GENERAL_TLS_ENABLED\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 是否启用TLS, true/false")]),e._v("\nORDERER_GENERAL_TLS_PRIVATEKEY\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# orderer节点的私钥文件, 按照下边的示例目录找")]),e._v("\n\t- "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),e._v("crypto-config/ordererOrganizations/xx.com/orderers/orderer.xx.com/tls/server.key\nORDERER_GENERAL_TLS_CERTIFICATE\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 证书文件")]),e._v("\n\t- "),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v("crypto-config/ordererOrganizations/xx.com/orderers/orderer.xx.com/tls/server.crt\nORDERER—GENERAL_TLS_ROOTCAS\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 根证书文件")]),e._v("\n\t- `crypto-config/ordererOrganizations/xx.com/orderers/orderer.xx.com/tls/ca.crt\n")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("blockquote",[n("p",[e._v("peer模块是Fabric中最重要的模块，也是在Fabric系统使用最多的模块。peer模块在Fabric中被称为主节点模块，主要负责存储区块链数据、运行维护链码、提供对外服务接口等作用。")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("pre",{staticClass:"language-shell"},[n("code",{pre:!0,attrs:{class:"language-shell"}},[n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 通过docker启动peer节点的镜像文件")]),e._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run -it hyperledger/fabric-peer "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("bash")]),e._v("\n$ peer --help\nUsage:\n  peer "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("command"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n\nAvailable Commands:\n  "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),e._v("chaincode"),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v("   相关的子命令:\n  \t\t"),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v("\n  \t\t"),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),e._v("instantiate"),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v("\n  \t\t"),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),e._v("invoke"),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v("\n  \t\t"),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),e._v("package"),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v("\n  \t\t"),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),e._v("query"),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v("\n  \t\t"),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),e._v("signpackage"),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v("\n  \t\t"),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),e._v("upgrade"),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v("\n  \t\t"),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),e._v("list"),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v("\n  channel     通道操作: create"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("fetch"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("join")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("list"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("update"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("signconfigtx"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("getinfo.\n  "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("help")]),e._v("        查看相关命令的帮助信息\n  logging     日志级别: getlevel"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("setlevel"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("revertlevels.\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("node")]),e._v("        node节点操作: start"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("status.\n  version     当前peer的版本.\n\nFlags:\n  -h, --help                   "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("help")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" peer\n      --logging-level string   Default logging level and overrides, see core.yaml "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" full syntax\n")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("peer channel的子命令可以通过 "),n("code",{pre:!0},[e._v("peer channel --help")]),e._v("进行查看. 这里介绍一个这些子命令可以共用的一些参数:")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("code",{pre:!0},[e._v("crypto-config/ordererOrganizations/itcast.com/orderers/ubuntu.itcast.com/msp/tlscacerts/tlsca.itcast.com-cert.pem")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("li",[n("p",[n("code",{pre:!0},[e._v("-o, --orderer")]),e._v(": orderer节点的地址")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("li",[n("p",[n("code",{pre:!0},[e._v("--tls")]),e._v(": 通信时是否使用tls加密")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[n("p",[n("strong",[e._v("create")]),e._v(" - 创建通道")]),e._v(" "),n("blockquote",[n("p",[e._v("命令: "),n("code",{pre:!0},[e._v("peer channel create [flags]")]),e._v(", 可用参数为:")]),e._v(" "),n("ul",[n("li",[n("code",{pre:!0},[e._v(" -c, --channelID")]),e._v(": 要创建的通道的ID, 必须小写, 在250个字符以内")]),e._v(" "),n("li",[n("code",{pre:!0},[e._v("-f, --file")]),e._v(": 由configtxgen 生成的通道文件, 用于提交给orderer")]),e._v(" "),n("li",[n("code",{pre:!0},[e._v("-t, --timeout")]),e._v(": 创建通道的超时时长")])])]),e._v(" "),n("pre",{staticClass:"language-shell"},[n("code",{pre:!0,attrs:{class:"language-shell"}},[e._v("$ peer channel create -o ubuntu.itcast.com:7050 -c "),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$CHANNEL_NAME")]),e._v(" -f ./channel-artifacts/channel.tx --tls "),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$CORE_PEER_TLS_ENABLED")]),e._v(" --cafile "),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$ORDERER_CA")]),e._v("\n")])])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("join")]),e._v(" - 将peer加入到通道中")]),e._v(" "),n("blockquote",[n("p",[e._v("命令: "),n("code",{pre:!0},[e._v("peer channel join[flags]")]),e._v(", 可用参数为:")]),e._v(" "),n("ul",[n("li",[n("code",{pre:!0},[e._v("-b, --blockpath")]),e._v(": genesis创始块文件")])])]),e._v(" "),n("pre",{staticClass:"language-shell"},[n("code",{pre:!0,attrs:{class:"language-shell"}},[e._v("$ peer channel "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("join")]),e._v(" -b mychannel.block\n")])])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("list")]),e._v(" - 列出peer加入的通道")]),e._v(" "),n("pre",{staticClass:"language-shell"},[n("code",{pre:!0,attrs:{class:"language-shell"}},[e._v("$ peer channel list\n")])])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("update")]),e._v(" - 更新")]),e._v(" "),n("blockquote",[n("p",[e._v("命令: "),n("code",{pre:!0},[e._v("peer channel update [flags]")]),e._v(", 可用参数为:")]),e._v(" "),n("ul",[n("li",[n("code",{pre:!0},[e._v(" -c, --channelID")]),e._v(": 要创建的通道的ID, 必须小写, 在250个字符以内")]),e._v(" "),n("li",[n("code",{pre:!0},[e._v("-f, --file")]),e._v(": 由configtxgen 生成的组织锚节点文件, 用于提交给orderer")])])]),e._v(" "),n("pre",{staticClass:"language-shell"},[n("code",{pre:!0,attrs:{class:"language-shell"}},[e._v("$ peer channel update -o orderer.example.com:7050 -c mychannel -f ./channel-artifacts/Org1MSPanchors.tx --tls "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v(" --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem\n")])])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("h5",{attrs:{id:"peer-的环境变量"}},[n("strong",[e._v("peer 的环境变量")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("pre",{staticClass:"language-shell"},[n("code",{pre:!0,attrs:{class:"language-shell"}},[n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 配置文件和环境变量是设置peer启动参数的重要手段, 相关环境变量如下:")]),e._v("\nCORE_VM_ENDPOINT\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker服务器的Deamon地址, 默认取端口的套接字, 如下:")]),e._v("\n\t- "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),e._v("unix:///var/run/docker.sock\nCORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# chaincode容器的网络命名模式, 自己取名即可")]),e._v("\n\t- "),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v("节点运行在同一个网络中才能相互通信, 不同网络中的节点相互隔离\nCORE_PEER_PROFILE_ENABLED\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 使用peer内置的 profile server")]),e._v("\n\t- "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),e._v("fabric的peer内置有profile server，默认时运行在6060端口上的，并且默认关闭。\nCORE_LOGGING_LEVEL\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# log日志的级别")]),e._v("\n\t- "),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v("critical "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" error "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" warning "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" notice "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" info "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" debug\nCORE_PEER_ID\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# peer节点的编号, 自定义一个即可")]),e._v("\nCORE_PEER_GOSSIP_USELEADERELECTION\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 是否自动选举leader节点, 自动:true")]),e._v("\nCORE_PEER_GOSSIP_ORGLEADER\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 当前节点是否为leader节点, 是:true")]),e._v("\nCORE_PEER_ADDRESS\t\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 当前peer节点的访问地址")]),e._v("\n\t- "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),e._v("格式: 域名:端口 / IP:端口\nCORE_PEER_CHAINCODELISTENADDRESS\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# chaincode的监听地址")]),e._v("\nCORE_PEER_GOSSIP_EXTERNALENDPOINT\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 节点被组织外节点感知时的地址")]),e._v("\n\t- "),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v("默认为空, 代表不被其他组织节点所感知\nCORE_PEER_GOSSIP_BOOTSTRAP\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 启动节点后向哪些节点发起gossip连接, 以加入网络")]),e._v("\n\t- "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),e._v("这些节点与本地节点需要属于同一个网络\nCORE_PEER_LOCALMSPID \t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# peer节点所属的组织的编号, 在configtxgen.yaml中设置的")]),e._v("\nCORE_CHAINCODE_MODE\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# chaincode的运行模式")]),e._v("\n\t- "),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v("net: 网络模式\n\t- "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),e._v("dev: 开发模式, 该模式下可以在容器外运行chaincode\nCORE_PEER_MSPCONFIGPATH\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 当前节点的msp文件路径")]),e._v("\n\t- "),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v("启动peer的时候需要使用msp账号文件\n\t- "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),e._v("crypto-config/peerOrganizations/org1.x.com/peers/peer0.org1.x.com/msp\n\t- "),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v("创建channel的时候需要使用msp账号文件\n\t- "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),e._v("crypto-config/peerOrganizations/org1.x.com/users/Admin@org1.x.com/msp\nCORE_PEER_TLS_ENABLED\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 是否激活tls, 激活:true, 不激活:false")]),e._v("\nCORE_PEER_TLS_CERT_FILE\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 服务器身份验证证书")]),e._v("\n\t- "),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v("crypto-config/peerOrganizations/org1.x.com/peers/peer0.org1.x.com/tls/server.crt\nCORE_PEER_TLS_KEY_FILE\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 服务器的私钥文件")]),e._v("\n\t- "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),e._v("crypto-config/peerOrganizations/org1.x.com/peers/peer0.org1.x.com/tls/server.key\nCORE_PEER_TLS_ROOTCERT_FILE\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 根服务器证书")]),e._v("\n\t- "),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v("crypto-config/peerOrganizations/org1.x.com/peers/peer0.org1.x.com/tls/ca.crt\n")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[n("p",[e._v("静态选择leader peer")]),e._v(" "),n("pre",{staticClass:"language-shell"},[n("code",{pre:!0,attrs:{class:"language-shell"}},[n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("CORE_PEER_GOSSIP_USELEADERELECTION")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("false\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("CORE_PEER_GOSSIP_ORGLEADER")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("true "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#指定某一个peer为leader peer")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 1. 如果都配置为 false，那么 peer 不会尝试变成一个 leader")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 2. 如果都配置为 true，会引发异常")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 3. 静态配置的方式，需要自行保证 leader 的可用性")]),e._v("\n")])])]),e._v(" "),n("li",[n("p",[e._v("动态选择leader peer")]),e._v(" "),n("pre",{staticClass:"language-shell"},[n("code",{pre:!0,attrs:{class:"language-shell"}},[n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("CORE_PEER_GOSSIP_USELEADERELECTION")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("true\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("CORE_PEER_GOSSIP_ORGLEADER")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("false\n")])])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("h5",{attrs:{id:"peer-默认监听的端口"}},[n("strong",[e._v("peer 默认监听的端口")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("blockquote",[n("p",[e._v("下面是Hyperledger中相关监听的服务端口（默认）")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("7050: REST 服务端口")])]),e._v(" "),n("li",[n("p",[e._v("7051：peer gRPC 服务监听端口")])]),e._v(" "),n("li",[n("p",[e._v("7052：peer CLI 端口")])]),e._v(" "),n("li",[n("p",[e._v("7053：peer 事件服务端口")])]),e._v(" "),n("li",[n("p",[e._v("7054：eCAP")])]),e._v(" "),n("li",[n("p",[e._v("7055：eCAA")])]),e._v(" "),n("li",[n("p",[e._v("7056：tCAP")])]),e._v(" "),n("li",[n("p",[e._v("7057：tCAA")])]),e._v(" "),n("li",[n("p",[e._v("7058：tlsCAP")])]),e._v(" "),n("li",[n("p",[e._v("7059：tlsCAA")])])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("blockquote",[n("p",[e._v("编写docker-compose启动时加载的配置文件，默认加载的文件名为：``docker-compose.yml/yaml"),n("code",{pre:!0},[e._v("，可通过命令")]),e._v("docker-compose --help"),n("code",{pre:!0},[e._v("查看。我们将该文件放到项目目录")]),e._v("~/Demo`中。")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("pre",{staticClass:"language-yaml"},[n("code",{pre:!0,attrs:{class:"language-yaml"}},[n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Copyright IBM Corp. All Rights Reserved.")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# SPDX-License-Identifier: Apache-2.0")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# compose 版本号")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("version")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'2'")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 数据卷映射, 本地 -> docker镜像")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("volumes")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("orderer.example.com")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("peer0.org1.example.com")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("peer1.org1.example.com")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("peer0.org2.example.com")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("peer1.org2.example.com")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("networks")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 指定容器运行的网络, 同一网络中的容器才能相互通信")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("byfn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("services")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("orderer.example.com")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 定义的第1个服务名")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("extends")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 继承自当前yaml文件或者其它文件中定义的服务")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("file")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("   base/docker"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("compose"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("base.yaml\n       "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 要继承上述file文件中对应的名字叫做orderer.example.com的服务")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("service")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" orderer.example.com "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 容器名称, 可以自定义")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("container_name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" orderer.example.com "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 指定容器启动后运行的网络名")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("networks")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" byfn\n\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("peer0.org1.example.com")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 定义的第2个服务名")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("container_name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" peer0.org1.example.com\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("extends")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("file")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("  base/docker"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("compose"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("base.yaml\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("service")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" peer0.org1.example.com\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("networks")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" byfn\n\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("peer1.org1.example.com")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 定义的第3个服务名")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("container_name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" peer1.org1.example.com\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("extends")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("file")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("  base/docker"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("compose"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("base.yaml\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("service")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" peer1.org1.example.com\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("networks")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" byfn\n\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("peer0.org2.example.com")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 定义的第4个服务名")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("container_name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" peer0.org2.example.com\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("extends")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("file")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("  base/docker"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("compose"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("base.yaml\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("service")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" peer0.org2.example.com\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("networks")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" byfn\n\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("peer1.org2.example.com")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 定义的第5个服务名")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("container_name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" peer1.org2.example.com\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("extends")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("file")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("  base/docker"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("compose"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("base.yaml\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("service")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" peer1.org2.example.com\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("networks")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" byfn\n\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("cli")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 定义的第6个服务名")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("container_name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" cli\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("image")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" hyperledger/fabric"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("tools"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("$IMAGE_TAG "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 指定服务的镜像名称或镜像 ID")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("tty")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean important"}},[e._v("true")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("stdin_open")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean important"}},[e._v("true")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("environment")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 环境变量设置")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" GOPATH=/opt/gopath\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_VM_ENDPOINT=unix"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("///host/var/run/docker.sock\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#- CORE_LOGGING_LEVEL=DEBUG")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_LOGGING_LEVEL=INFO\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_PEER_ID=cli\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_PEER_ADDRESS=peer0.org1.example.com"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("7051")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_PEER_LOCALMSPID=Org1MSP\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_PEER_TLS_ENABLED=true\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("working_dir")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" /opt/gopath/src/github.com/hyperledger/fabric/peer "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 工作目录")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("command")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" /bin/bash   "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 容器启动后执行的命令")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("volumes")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 本地数据卷内容挂载到容器, 挂载到容器中的数据是只读的")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" /var/run/"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("/host/var/run/\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" ./../chaincode/"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("/opt/gopath/src/github.com/chaincode\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" ./crypto"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("config"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" ./scripts"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" ./channel"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("artifacts"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("/opt/gopath/src/github.com/hyperledger/fabric/peer/channel"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("artifacts\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("depends_on")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 指定了容器的启动顺序, 下边5个服务全部启动之后, 启动cli服务")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" orderer.example.com     "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 定义的服务器名1")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" peer0.org1.example.com  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 定义的服务器名2")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" peer1.org1.example.com  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 定义的服务器名3")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" peer0.org2.example.com  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 定义的服务器名4")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" peer1.org2.example.com  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 定义的服务器名5")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("networks")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" byfn\n\n\n")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("blockquote",[n("p",[e._v("接下来就上面 "),n("code",{pre:!0},[e._v("docker-compose-cli.yaml")]),e._v(" 文件中依赖的文件"),n("code",{pre:!0},[e._v("docker-compose-base.yaml")]),e._v("，根据上面的指定可以知道该文件是放到base目录中，也就是说需要在Demo目录中创建子目录base："),n("code",{pre:!0},[e._v("mkdir base")]),e._v("。")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("pre",{staticClass:"language-yaml"},[n("code",{pre:!0,attrs:{class:"language-yaml"}},[n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Copyright IBM Corp. All Rights Reserved.")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# SPDX-License-Identifier: Apache-2.0")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("version")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'2'")]),e._v("\n\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("services")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("orderer.example.com")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 排序节点服务名称")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("container_name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" orderer.example.com\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("image")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" hyperledger/fabric"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("orderer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("$IMAGE_TAG\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("environment")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" ORDERER_GENERAL_LOGLEVEL=INFO\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" ORDERER_GENERAL_LISTENADDRESS=0.0.0.0\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" ORDERER_GENERAL_GENESISMETHOD=file\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" ORDERER_GENERAL_LOCALMSPID=OrdererMSP\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# enabled TLS")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" ORDERER_GENERAL_TLS_ENABLED=true\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" ORDERER_GENERAL_TLS_ROOTCAS="),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("/var/hyperledger/orderer/tls/ca.crt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("working_dir")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" /opt/gopath/src/github.com/hyperledger/fabric\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("command")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" orderer\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("volumes")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" ../channel"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("artifacts/genesis.block"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("/var/hyperledger/orderer/orderer.genesis.block\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" ../crypto"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("config/ordererOrganizations/example.com/orderers/orderer.example.com/msp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("/var/hyperledger/orderer/msp\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" ../crypto"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("config/ordererOrganizations/example.com/orderers/orderer.example.com/tls/"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("/var/hyperledger/orderer/tls\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" orderer.example.com"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("/var/hyperledger/production/orderer\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("ports")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" 7050"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("7050")]),e._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("peer0.org1.example.com")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("container_name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" peer0.org1.example.com\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("extends")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("file")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" peer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("base.yaml\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("service")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" peer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("base\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("environment")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_PEER_ID=peer0.org1.example.com\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_PEER_ADDRESS=peer0.org1.example.com"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("7051")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_PEER_GOSSIP_BOOTSTRAP=peer1.org1.example.com"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("7051")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.example.com"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("7051")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_PEER_LOCALMSPID=Org1MSP\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("volumes")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" /var/run/"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("/host/var/run/\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" ../crypto"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("/etc/hyperledger/fabric/msp\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" ../crypto"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("/etc/hyperledger/fabric/tls\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" peer0.org1.example.com"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("/var/hyperledger/production\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("ports")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" 7051"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("7051")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" 7053"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("7053")]),e._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("peer1.org1.example.com")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("container_name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" peer1.org1.example.com\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("extends")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("file")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" peer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("base.yaml\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("service")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" peer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("base\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("environment")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_PEER_ID=peer1.org1.example.com\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_PEER_ADDRESS=peer1.org1.example.com"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("7051")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org1.example.com"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("7051")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.example.com"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("7051")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_PEER_LOCALMSPID=Org1MSP\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("volumes")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" /var/run/"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("/host/var/run/\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" ../crypto"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/msp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("/etc/hyperledger/fabric/msp\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" ../crypto"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("/etc/hyperledger/fabric/tls\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" peer1.org1.example.com"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("/var/hyperledger/production\n\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("ports")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" 8051"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("7051")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" 8053"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("7053")]),e._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("peer0.org2.example.com")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("container_name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" peer0.org2.example.com\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("extends")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("file")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" peer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("base.yaml\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("service")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" peer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("base\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("environment")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_PEER_ID=peer0.org2.example.com\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_PEER_ADDRESS=peer0.org2.example.com"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("7051")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org2.example.com"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("7051")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_PEER_GOSSIP_BOOTSTRAP=peer1.org2.example.com"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("7051")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_PEER_LOCALMSPID=Org2MSP\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("volumes")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" /var/run/"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("/host/var/run/\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" ../crypto"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/msp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("/etc/hyperledger/fabric/msp\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" ../crypto"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("/etc/hyperledger/fabric/tls\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" peer0.org2.example.com"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("/var/hyperledger/production\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("ports")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" 9051"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("7051")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" 9053"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("7053")]),e._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("peer1.org2.example.com")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("container_name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" peer1.org2.example.com\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("extends")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("file")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" peer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("base.yaml\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("service")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" peer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("base\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("environment")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_PEER_ID=peer1.org2.example.com\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_PEER_ADDRESS=peer1.org2.example.com"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("7051")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org2.example.com"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("7051")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org2.example.com"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("7051")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_PEER_LOCALMSPID=Org2MSP\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("volumes")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" /var/run/"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("/host/var/run/\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" ../crypto"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("config/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/msp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("/etc/hyperledger/fabric/msp\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" ../crypto"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("config/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("/etc/hyperledger/fabric/tls\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" peer1.org2.example.com"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("/var/hyperledger/production\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("ports")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" 10051"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("7051")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" 10053"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("7053")]),e._v("\n")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("blockquote",[n("p",[e._v("在上面的docker-compose-base.yaml文件中又引用了文件"),n("code",{pre:!0},[e._v("peer-base.yaml")]),e._v("，接下来我们对该文件进行修改。")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("pre",{staticClass:"language-yaml"},[n("code",{pre:!0,attrs:{class:"language-yaml"}},[n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Copyright IBM Corp. All Rights Reserved.")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# SPDX-License-Identifier: Apache-2.0")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("version")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'2'")]),e._v("\n\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("services")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("peer-base")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("image")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" hyperledger/fabric"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("peer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("$IMAGE_TAG\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("environment")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_VM_ENDPOINT=unix"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("///host/var/run/docker.sock\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the following setting starts chaincode containers on the same")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# bridge network as the peers")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# https://docs.docker.com/compose/networking/")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("COMPOSE_PROJECT_NAME"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("_byfn\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_LOGGING_LEVEL=INFO\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#- CORE_LOGGING_LEVEL=DEBUG")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_PEER_TLS_ENABLED=true\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_PEER_GOSSIP_USELEADERELECTION=true\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_PEER_GOSSIP_ORGLEADER=false\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_PEER_PROFILE_ENABLED=true\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("working_dir")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" /opt/gopath/src/github.com/hyperledger/fabric/peer\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("command")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" peer node start\n")])])}]};e.exports={attributes:{Titile:"fabric_learn",description:"联盟链学习"},vue:{render:n.render,staticRenderFns:n.staticRenderFns,component:{data:function(){return{templateRender:null}},render:function(e){return this.templateRender?this.templateRender():e("div","Rendering")},created:function(){this.templateRender=n.render,this.$options.staticRenderFns=n.staticRenderFns}}}}}}]);